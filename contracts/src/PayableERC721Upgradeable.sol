// SPDX-License-Identifier: MIT

pragma solidity ^0.8.13;

import "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "./ERC2981Upgradeable.sol";

/**
 * @dev {ERC721} token, including:
 *
 *  - ability for holders to burn (destroy) their tokens
 *  - a minter role that allows for token minting (creation)
 *  - token ID and URI autogeneration
 *
 * This contract uses {AccessControl} to lock permissioned functions using the
 * different roles - head to its documentation for details.
 *
 */
contract PayableERC721Upgradeable is
  Initializable,
  ContextUpgradeable,
  OwnableUpgradeable,
    ERC721Upgradeable,
  ERC721EnumerableUpgradeable,
  ERC2981Upgradeable
{
  function initialize(
    string memory name,
    string memory symbol,
    string memory baseTokenURI,
    uint256 mintPrice,
    uint256 maxSupply,
    uint256 launchDate,
    address payout
  ) public initializer {
    __PayableERC721_init(name, symbol, baseTokenURI, mintPrice, maxSupply, launchDate, payout);
  }

  using CountersUpgradeable for CountersUpgradeable.Counter;

  CountersUpgradeable.Counter private _tokenIdTracker;

  string private _baseTokenURI;
  uint256 private _mintPrice;
  uint256 private _maxSupply;
  uint256 private _launchDate;
  address private _payout;

  /**
   * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the
   * account that deploys the contract.
   *
   * Token URIs will be autogenerated based on `baseURI` and their token IDs.
   * See {ERC721-tokenURI}.
   */
  function __PayableERC721_init(
    string memory name,
    string memory symbol,
    string memory baseTokenURI,
    uint256 mintPrice,
    uint256 maxSupply,
    uint256 launchDate,
    address payout
  ) internal initializer {
    __Context_init_unchained();
    __ERC165_init_unchained();
    __Ownable_init_unchained();
    __ERC721_init_unchained(name, symbol);
    __ERC721Enumerable_init_unchained();
    __ERC2981_init_unchained();

    __PayableERC721_init_unchained(name, symbol, baseTokenURI, mintPrice, maxSupply, launchDate, payout);
  }

  function __PayableERC721_init_unchained(
    string memory,
    string memory,
    string memory baseTokenURI,
    uint256 mintPrice,
    uint256 maxSupply,
    uint256 launchDate,
    address payout
  ) internal initializer {
    _baseTokenURI = baseTokenURI;
    _mintPrice = mintPrice;
    _maxSupply = maxSupply;
    _launchDate = launchDate;
    _payout = payout;

    // Set royalties to 10%
    _setDefaultRoyalty(payout, 1000);
  }

  function _baseURI() internal view virtual override returns (string memory) {
      //TODO: Devia ser publico 
    return _baseTokenURI;
  }

  function setBaseURI(string memory baseTokenURI) external virtual onlyOwner {
    _setBaseURI(baseTokenURI);
  }

  function _setBaseURI(string memory baseTokenURI) internal virtual {
      //TODO: Evento
    _baseTokenURI = baseTokenURI;
  }

  /**
   * @dev Creates a new token for `to`. Its token ID will be automatically
   * assigned (and available on the emitted {IERC721-Transfer} event), and the token
   * URI autogenerated based on the base URI passed at construction.
   *
   * See {ERC721-_mint}.
   *
   */
  function mint() public payable {
    require(block.timestamp >= _launchDate, "minting not enabled yet, please wait");
    require(_tokenIdTracker.current() < _maxSupply, "Maximum supply reached");
    require(msg.value >= _mintPrice, "Insuficient funds");

    // We cannot just use balanceOf to create the new tokenId because tokens
    // can be burned (destroyed), so we need a separate counter.
    _mint(msg.sender, _tokenIdTracker.current());
    _tokenIdTracker.increment();
  }

  function _beforeTokenTransfer(
    address from,
    address to,
    uint256 tokenId
  ) internal virtual override(ERC721Upgradeable, ERC721EnumerableUpgradeable) {
    super._beforeTokenTransfer(from, to, tokenId);
  }

  function burn(uint256 tokenId) public {
      require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721Upgradeable: caller is not owner nor approved");
      _burn(tokenId);
  }

  /// @notice Withdraw all ETH from the contract to the vault addres.
  function withdraw() external onlyOwner {
    require(address(this).balance > 0, "No funds to withdraw");

    //TODO: Adicionar evento
    payable(_payout).transfer(address(this).balance);
  }

  /**
   * @dev See {IERC165-supportsInterface}.
   */
  function supportsInterface(bytes4 interfaceId)
    public
    view
    virtual
    override(ERC721Upgradeable, ERC721EnumerableUpgradeable, ERC2981Upgradeable)
    returns (bool)
  {
    return super.supportsInterface(interfaceId);
  }

  /**
   * @dev This empty reserved space is put in place to allow future versions to add new
   * variables without shifting down storage in the inheritance chain.
   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps
   */
  uint256[48] private __gap;
}
